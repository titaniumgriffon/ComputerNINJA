<File version="3.1">
  <FileID>e0ddc2d8-fb6b-4be2-b3ca-9520c8699739</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKDhSURBVHhe7P1ncBzJmqYL7u3ZvT/GxmxszObP
zNzd2V3btbX7a+7sWt82m+m5LU53nz59VNUpzSpqrUCQBAgNgtAgtNZaa6211lprIJECWmuAfNe/
SIAFZqHqkEUyi4n8HrPXMiMywsPDwzP8dY8vIv5PDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDKMvxPzFX/xF6//j
//6fW+/fv99qamrW+uSJKYvFYrFYLB2RiYlpq4WFReuv/+kfW//n//n/0iradtJPIxr/gX/8x39E
cHgMGrvHMCRbxsDUIovFYrFYLB3R4PSS+FxAaU0T7ty5i3/7b/8tjpr5H+c//+f/W2tgaDS6JhZR
3TWJ8vZRVLBYLBaLxdIplbePoXloFvXtA/jNb37z5w3AvXv3Whu7R1HTM43qznEWi8VisVg6qqqO
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
8Yv/AvramgVd8+kVAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[[double]$VersionNumber = "1.0"

Function Create-LogEntry
{
	param (
		[CmdletBinding()]
		[string[]]$ErrorMessage
	)
	[String]$username = $env:UserName
	[String]$UserDomain = $env:USERDOMAIN
	$ComputerName = $env:COMPUTERNAME
	$currentDateandTime = get-date
	$logentry = "$currentDateandTime,$userdomain\$username,$ComputerName,$ErrorMessage"
}

function get-loggedonuser
{
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $true)]
		$ComputerName
	)
	
	$regexa = '.+Domain="(.+)",Name="(.+)"$'
	$regexd = '.+LogonId="(\d+)"$'
	
	$logontype = @{
		"0" = "Local System"
		"2" = "Interactive" #(Local logon)
		"3" = "Network" # (Remote logon)
		"4" = "Batch" # (Scheduled task)
		"5" = "Service" # (Service account logon)
		"7" = "Unlock" #(Screen saver)
		"8" = "NetworkCleartext" # (Cleartext network logon)
		"9" = "NewCredentials" #(RunAs using alternate credentials)
		"10" = "RemoteInteractive" #(RDP\TS\RemoteAssistance)
		"11" = "CachedInteractive" #(Local w\cached credentials)
	}
	
	$logon_sessions = @(gwmi win32_logonsession -ComputerName $computername)
	$logon_users = @(gwmi win32_loggedonuser -ComputerName $computername)
	
	$session_user = @{ }
	
	$logon_users | % {
		$_.antecedent -match $regexa > $nul
		$username = $matches[1] + "\" + $matches[2]
		$_.dependent -match $regexd > $nul
		$session = $matches[1]
		$session_user[$session] += $username
	}
	
	
	$rtbTab1.Text = $logon_sessions | %{
		$starttime = [management.managementdatetimeconverter]::todatetime($_.starttime)
		
		$loggedonuser = New-Object -TypeName psobject
		$loggedonuser | Add-Member -MemberType NoteProperty -Name "Session" -Value $_.logonid
		$loggedonuser | Add-Member -MemberType NoteProperty -Name "User" -Value $session_user[$_.logonid]
		$loggedonuser | Add-Member -MemberType NoteProperty -Name "Type" -Value $logontype[$_.logontype.tostring()]
		$loggedonuser | Add-Member -MemberType NoteProperty -Name "Auth" -Value $_.authenticationpackage
		$loggedonuser | Add-Member -MemberType NoteProperty -Name "StartTime" -Value $starttime
		
		$loggedonuser
	} | Out-String
	
}
Function Test-ComputerName
{
	param (
		[CmdletBinding()]
		[string[]]$ComputerName = $env:COMPUTERNAME
	)
	#Get Domain List
	$objForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
	$DomainList = @($objForest.Domains | Select-Object Name)
	$Domains = $DomainList | foreach { $_.Name }
	
	
	#Act on each domain
	foreach ($Domain in ($Domains))
	{
		Write-Host "Checking $Domain" -fore red
		$ADsPath = [ADSI]"LDAP://$Domain"
		$objSearcher = New-Object System.DirectoryServices.DirectorySearcher($ADsPath)
		$objSearcher.Filter = "(&(objectCategory=Computer)(CN=$ComputerName))"
		$objSearcher.SearchScope = "Subtree"
		
		$colResults = $objSearcher.FindAll()
		
		foreach ($objResult in $colResults)
		{
			#$Computer = $objResult.GetDirectoryEntry()
			[bool]$ComputerResult = $objResult.GetDirectoryEntry()
		}
		if ($ComputerResult) { $lblADObject.forecolor = "GREEN" }
		Else { $lblADObject.forecolor = "RED" }
	}
	#Check DNS
	[bool]$DNSResult = ([system.net.dns]::gethostentry($ComputerName))
	
	if ($DNSResult) { $lblDNS.forecolor = "GREEN" }
	Else { $lblDNS.forecolor = "RED" }
	#CHECK RDP
	#[bool]$RDPResult = ($socket = New-Object Net.Sockets.TcpClient($ComputerName, 3389))
	#
	#if ($RDPResult) { $WPFlblRDP.forecolor = "GREEN" }
	#Else { $WPFlblRDP.forecolor = "RED" }
	#Check PING
	[bool]$PingResult = (Test-Connection -ComputerName $ComputerName -Quiet -Count 1)
	if ($PingResult) { $lblPings.forecolor = "GREEN" }
	Else { $lblPINGs.forecolor = "RED" }
	#CHECK Powershell
	if ([bool](Test-WSMan -ComputerName "$ComputerName" -ErrorAction SilentlyContinue)) { $lblPOSH.forecolor = "GREEN" }
	ELSE { $lblPOSH.forecolor = "RED"; $buttonEnablePSRemoting.Visible = $true }
	#Check Permission
	if (Test-Path "\\$ComputerName\c$")
	{
		$lblPermission.forecolor = "Green"
	}
	Else { $lblPermission.forecolor = "RED" }
} #END FUNCTION
Function Get-PendingReboot
{
	
	[CmdletBinding()]
	param (
		[Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $true)]
		[Alias("CN", "Computer")]
		[String[]]$ComputerName = "$env:COMPUTERNAME",
		[String]$ErrorLog
	)
	
	Begin { } ## End Begin Script Block 
	Process
	{
		Foreach ($Computer in $ComputerName)
		{
			Try
			{
				## Setting pending values to false to cut down on the number of else statements 
				$CompPendRen, $PendFileRename, $Pending, $SCCM = $false, $false, $false, $false
				
				## Setting CBSRebootPend to null since not all versions of Windows has this value 
				$CBSRebootPend = $null
				
				## Querying WMI for build version 
				$WMI_OS = Get-WmiObject -Class Win32_OperatingSystem -Property BuildNumber, CSName -ComputerName $Computer -ErrorAction Stop
				
				## Making registry connection to the local/remote computer 
				$HKLM = [UInt32] "0x80000002"
				$WMI_Reg = [WMIClass] "\\$Computer\root\default:StdRegProv"
				
				## If Vista/2008 & Above query the CBS Reg Key 
				If ([Int32]$WMI_OS.BuildNumber -ge 6001)
				{
					$RegSubKeysCBS = $WMI_Reg.EnumKey($HKLM, "SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\")
					$CBSRebootPend = $RegSubKeysCBS.sNames -contains "RebootPending"
				}
				
				## Query WUAU from the registry 
				$RegWUAURebootReq = $WMI_Reg.EnumKey($HKLM, "SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\")
				$WUAURebootReq = $RegWUAURebootReq.sNames -contains "RebootRequired"
				
				## Query PendingFileRenameOperations from the registry 
				$RegSubKeySM = $WMI_Reg.GetMultiStringValue($HKLM, "SYSTEM\CurrentControlSet\Control\Session Manager\", "PendingFileRenameOperations")
				$RegValuePFRO = $RegSubKeySM.sValue
				
				## Query ComputerName and ActiveComputerName from the registry 
				$ActCompNm = $WMI_Reg.GetStringValue($HKLM, "SYSTEM\CurrentControlSet\Control\ComputerName\ActiveComputerName\", "ComputerName")
				$CompNm = $WMI_Reg.GetStringValue($HKLM, "SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName\", "ComputerName")
				If ($ActCompNm -ne $CompNm)
				{
					$CompPendRen = $true
				}
				
				## If PendingFileRenameOperations has a value set $RegValuePFRO variable to $true 
				If ($RegValuePFRO)
				{
					$PendFileRename = $true
				}
				
				## Determine SCCM 2012 Client Reboot Pending Status 
				## To avoid nested 'if' statements and unneeded WMI calls to determine if the CCM_ClientUtilities class exist, setting EA = 0 
				$CCMClientSDK = $null
				$CCMSplat = @{
					NameSpace = 'ROOT\ccm\ClientSDK'
					Class = 'CCM_ClientUtilities'
					Name = 'DetermineIfRebootPending'
					ComputerName = $Computer
					ErrorAction = 'Stop'
				}
				## Try CCMClientSDK 
				Try
				{
					$CCMClientSDK = Invoke-WmiMethod @CCMSplat
				}
				Catch [System.UnauthorizedAccessException] {
					$CcmStatus = Get-Service -Name CcmExec -ComputerName $Computer -ErrorAction SilentlyContinue
					If ($CcmStatus.Status -ne 'Running')
					{
						Write-Warning "$Computer`: Error - CcmExec service is not running."
						$CCMClientSDK = $null
					}
				}
				Catch
				{
					$CCMClientSDK = $null
				}
				
				If ($CCMClientSDK)
				{
					If ($CCMClientSDK.ReturnValue -ne 0)
					{
						Write-Warning "Error: DetermineIfRebootPending returned error code $($CCMClientSDK.ReturnValue)"
					}
					If ($CCMClientSDK.IsHardRebootPending -or $CCMClientSDK.RebootPending)
					{
						$SCCM = $true
					}
				}
				
				Else
				{
					$SCCM = $null
				}
				
				## Creating Custom PSObject and Select-Object Splat 
				$SelectSplat = @{
					Property = (
						'Computer',
						'CBServicing',
						'WindowsUpdate',
						'CCMClientSDK',
						'PendComputerRename',
						'PendFileRename',
						'PendFileRenVal',
						'RebootPending'
					)
				}
				New-Object -TypeName PSObject -Property @{
					Computer = $WMI_OS.CSName
					CBServicing = $CBSRebootPend
					WindowsUpdate = $WUAURebootReq
					CCMClientSDK = $SCCM
					PendComputerRename = $CompPendRen
					PendFileRename = $PendFileRename
					PendFileRenVal = $RegValuePFRO
					RebootPending = ($CompPendRen -or $CBSRebootPend -or $WUAURebootReq -or $SCCM -or $PendFileRename)
				} | Select-Object @SelectSplat | Out-String
				
			}
			Catch
			{
				Write-Warning "$Computer`: $_"
				## If $ErrorLog, log the file to a user specified location/path 
				If ($ErrorLog)
				{
					Out-File -InputObject "$Computer`,$_" -FilePath $ErrorLog -Append
				}
			}
		} ## End Foreach ($Computer in $ComputerName)       
	} ## End Process 
	
	End { } ## End End 
	
} ## End Function Get-PendingReboot
function Get-RemoteLogonStatus
{
	param (
		[CmdletBinding()]
		[string[]]$ComputerName
	)
	
	Write-Host "Entering If Function"
	if (Test-Connection $ComputerName -Count 2 -Quiet)
	{
		Write-Host "Entering first TRY Function"
		try
		{
			$user = $null
			$user = gwmi -Class win32_computersystem -ComputerName $ComputerName | select -ExpandProperty username -ErrorAction Stop
		}
		catch { "Not logged on" | Out-String; return }
		Write-Host "User Must be logged on"
		try
		{
			if ((Get-Process logonui -ComputerName $ComputerName -ErrorAction Stop) -and ($user))
			{
				"Workstation locked by $user" | Out-String
				Write-Host "Workstation is Locked"
			}
		}
		catch
		{
			if ($user) { "$user logged on" | Out-String }
			Write-Host "User is Logged In"
		}
	}
	else
	{
		"$ComputerName Offline" | Out-String
		Write-Host "Computer is Offline"
	}
	
}
function Get-LastBootTime
{
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $true)]
		$ComputerName
	)
	Get-WmiObject -Class Win32_OperatingSystem –ComputerName $ComputerName | Select-Object -Property CSName, @{
		n = "Last Booted";
		
		e = { [Management.ManagementDateTimeConverter]::ToDateTime($_.LastBootUpTime) }
	} | Out-String
} #End Get-LastBootTime Function
Function Enable-RemotePowershellConnection
{
	#Requires -Version 2.0 
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $true)]
		[String]$ComputerName)
	
	psexec \\$ComputerName  cmd /c powershell.exe enable-psremoting -force
	
}
Function Get-ComputerInfo2
{
	[CmdletBinding()]
	#param(
	#	[Parameter(Mandatory=$true,Position=0,ValueFromPipeline=$true)]
	#	[Alias("CN","Computer")]
	#	[String[]]$ComputerName="$env:COMPUTERNAME"
	#	)
	Param (
		[Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true)]
		[Alias("CN", "Computer")]
		$ComputerName
	)
	Begin
	{
		$i = 0
		#Adjusting ErrorActionPreference to stop on all errors
		$TempErrAct = $ErrorActionPreference
		$ErrorActionPreference = "Stop"
		$newline = "`n"
		
		#Defining $CompInfo Select Properties For Correct Display Order
		$CompInfoSelProp = @(
			"Computer"
			"Domain"
			"OperatingSystem"
			"OSArchitecture"
			"BuildNumber"
			"ServicePack"
			"Manufacturer"
			"Model"
			"SerialNumber"
			"Processor"
			"LogicalProcessors"
			"PhysicalMemory"
			"OSReportedMemory"
			"PAEEnabled"
			"InstallDate"
			"LastBootUpTime"
			"UpTime"
			"RebootPending"
			"RebootPendingKey"
			"CBSRebootPending"
			"WinUpdRebootPending"
		) #End $CompInfoSelProp
		
		#Defining $NetInfo Select Properties For Correct Display Order
		$NetInfoSelProp = @(
			"NICName"
			"NICManufacturer"
			"DHCPEnabled"
			"MACAddress"
			"IPAddress"
			"IPSubnetMask"
			"DefaultGateway"
			"DNSServerOrder"
			"DNSSuffixSearch"
			"PhysicalAdapter"
			"Speed"
		) #End $NetInfoSelProp
		
		#Defining $VolInfo Select Properties For Correct Display Order
		$VolInfoSelProp = @(
			"DeviceID"
			"VolumeName"
			"VolumeDirty"
			"Size"
			"FreeSpace"
			"PercentFree"
		) #End $VolInfoSelProp
		
	} #End Begin Script Block
	
	Process
	{
		Foreach ($Computer in $ComputerName)
		{
			Try
			{
				If ($ComputerName.Count -gt 1)
				{
					#Setting up Main Write-Progress Process, If Querying More Than 1 Computer.
					$WriteProgParams = @{
						Id = 1
						Activity = "Processing Get-ComputerInfo For $Computer"
						Status = "Percent Complete: $([int]($i/($ComputerName.Count) * 100))%"
						PercentComplete = [int]($i++/($ComputerName.Count) * 100)
					} #End $WriteProgParam Hashtable		
					Write-Progress @WriteProgParams
				} #End If ($ComputerName.Count -gt 1)
				
				#Gathering WMI Data
				$n, $d = 0, 8
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_Processor" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_PROC = Get-WmiObject -Class Win32_Processor -ComputerName $Computer
				
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_BIOS" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_BIOS = Get-WmiObject -Class Win32_BIOS -ComputerName $Computer
				
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_ComputerSystem" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_CS = Get-WmiObject -Class Win32_ComputerSystem -ComputerName $Computer
				
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_OperatingSystem" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_OS = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer
				
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_PhysicalMemory" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_PM = Get-WmiObject -Class Win32_PhysicalMemory -ComputerName $Computer
				
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_LogicalDisk" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_LD = Get-WmiObject -Class Win32_LogicalDisk -Filter "DriveType = '3'" -ComputerName $Computer
				
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_NetworkAdapter" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_NA = Get-WmiObject -Class Win32_NetworkAdapter -ComputerName $Computer
				
				Write-Progress -ParentId 1 -Activity "Collecting Data: Win32_NetworkAdapter" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$WMI_NAC = Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter "IPEnabled=$true" -ComputerName $Computer
				
				#Connecting to the Registry to determine PendingReboot status.
				Write-Progress -ParentId 1 -Activity "Collecting Data: Registry Query" -Status "Percent Complete: $([int](($n/$d) * 100))%" -PercentComplete (($n/$d) * 100); $n++
				$RegCon = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey([Microsoft.Win32.RegistryHive]"LocalMachine", $Computer)
				
				#If Windows Vista & Above, CBS Will Not Write To The PFRO Reg Key, Query CBS Key For "RebootPending" Key.
				#Also, since there are properties that are exclusive to 2K8+ marking "Unaval" for computers below 2K8.
				$WinBuild = $WMI_OS.BuildNumber
				$CBSRebootPend, $RebootPending = $false, $false
				If ($WinBuild -ge 6001)
				{
					#Querying the Component Based Servicing reg key for pending reboot status.
					$RegSubKeysCBS = $RegCon.OpenSubKey("SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\").GetSubKeyNames()
					$CBSRebootPend = $RegSubKeysCBS -contains "RebootPending"
					
					#Values that are present in 2K8+
					$OSArchitecture = $WMI_OS.OSArchitecture
					$LogicalProcs = $WMI_CS.NumberOfLogicalProcessors
					
				} #End If ($WinBuild -ge 6001)
				Else
				{
					#Win32_OperatingSystem does not have a value for OSArch in 2K3 & Below
					$OSArchitecture = "**Unavailable**"
					
					#In order to gather processor count for 2K3 & Below, Win32_Processor Instance Count is needed.
					If ($WMI_PROC.Count -gt 1)
					{
						$LogicalProcs = $WMI_PROC.Count
					} #End If ($WMI_PROC.Count -gt 1)
					Else
					{
						$LogicalProcs = 1
					} #End Else
					
				} #End Else
				
				#Querying Session Manager for both 2K3 & 2K8 for the PendingFileRenameOperations REG_MULTI_SZ to set PendingReboot value.
				$RegSubKeySM = $RegCon.OpenSubKey("SYSTEM\CurrentControlSet\Control\Session Manager\")
				$RegValuePFRO = $RegSubKeySM.GetValue("PendingFileRenameOperations", $false)
				
				#Querying WindowsUpdate\Auto Update for both 2K3 & 2K8 for "RebootRequired"
				$RegWindowsUpdate = $RegCon.OpenSubKey("SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\").GetSubKeyNames()
				$WUAURebootReq = $RegWindowsUpdate -contains "RebootRequired"
				$RegCon.Close()
				
				#Setting the $RebootPending var based on data read from the PendingFileRenameOperations REG_MULTI_SZ and CBS Key.	
				If ($CBSRebootPend -or $RegValuePFRO -or $WUAURebootReq)
				{
					$RebootPending = $true
				} #End If ($RegValuePFRO -eq "NoValue")
				
				#Calculating Memory, Converting InstallDate, LastBootTime, Uptime.
				[int]$Memory = ($WMI_PM | Measure-Object -Property Capacity -Sum).Sum / 1MB
				$InstallDate = ([WMI]'').ConvertToDateTime($WMI_OS.InstallDate)
				$LastBootTime = ([WMI]'').ConvertToDateTime($WMI_OS.LastBootUpTime)
				$UpTime = New-TimeSpan -Start $LastBootTime -End (Get-Date)
				
				#PAEEnabled is only valid on x86 systems, setting value to false first.
				$PAEEnabled = $false
				If ($WMI_OS.PAEEnabled)
				{
					$PAEEnabled = $true
				}
				
				#Assign to TextBlock Fields
				
				$tbkServername.text = $WMI_CS.Name
				$tbkServername2.text = $WMI_CS.Name
				$tbkDomain.text = $WMI_CS.Domain.ToUpper()
				$tbkOperatingSystem.text = $WMI_OS.Caption
				$tbkArchitecture.text = $OSArchitecture
				$tbkManufacturer.text = $WMI_CS.Manufacturer
				$tbkModel.text = $WMI_CS.Model
				$tbkSerialNumber.text = $WMI_BIOS.SerialNumber
				$tbkProcessor.text = ($WMI_PROC | Select-Object -ExpandProperty Name -First 1)
				$tbkPhysicalMemory.text = $Memory
				$tbkInstallDate.text = $InstallDate
				$tbkLastBootUpTime.text = $LastBootTime
				$tbkUpTime.text = $UpTime
				#				$tbkRebootPending.text = $RebootPending
				
				
				$tbknetwork.text = " "
				#There may be multiple NICs that have IPAddresses, hence the Foreach loop.
				Foreach ($NAC in $WMI_NAC)
				{
					#Getting properties from $WMI_NA that correlate to the matched Index, this is faster than using $WMI_NAC.GetRelated('Win32_NetworkAdapter'). 
					$NetAdap = $WMI_NA | Where-Object { $NAC.Index -eq $_.Index }
					
					#Since there are properties that are exclusive to 2K8+ marking "Unaval" for computers below 2K8.
					If ($WinBuild -ge 6001)
					{
						$PhysAdap = $NetAdap.PhysicalAdapter
						$Speed = "{0:0} Mbit" -f $($NetAdap.Speed / 1000000)
					} #End If ($WinBuild -ge 6000)
					Else
					{
						$PhysAdap = "**Unavailable**"
						$Speed = "**Unavailable**"
					} #End Else
					
					
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("Name: " + $NetAdap.Name))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("Manufacturer: " + $NetAdap.Manufacturer))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("DHCPEnabled: " + $NAC.DHCPEnabled))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("MACAddress: " + $NAC.MACAddress))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("IPAddress: " + $NAC.IPAddress))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("Subnet: " + $NAC.IPSubnet))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("Gateway: " + $NAC.DefaultIPGateway))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("DNS: " + $NAC.DNSServerSearchOrder))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("DNS Suffix: " + $NAC.DNSDomainSuffixSearchOrder))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("PhysAdap: " + $PhysAdap))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($("Speed: " + $Speed))
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($newline)
					$tbknetwork.AppendText($newline)
					
				}
				
				#				$tbkdiskinformation.text = " "
				#				#There may be multiple Volumes, hence the Foreach loop.	
				#				Foreach ($Volume in $WMI_LD)
				#				{
				#					$tbkdiskinformation.addtext($newline)
				#					$tbkdiskinformation.addtext($($("Drive: " + $Volume.DeviceID) + $("          Name: " + $Volume.VolumeName) + $("          Dirty: " + $Volume.VolumeDirty)))
				#					$tbkdiskinformation.addtext($newline)
				#					$tbkdiskinformation.addtext($("Size: " + $("{0:F} GB" -f $($Volume.Size / 1GB))) + $("          Free Space: " + $("{0:F} GB" -f $($Volume.FreeSpace / 1GB))) + $("          Percent Free: " + $("{0:P}" -f $($Volume.FreeSpace / $Volume.Size))))
				#					$tbkdiskinformation.addtext($newline)
				#					$tbkdiskinformation.addtext($newline)
				#					
				#				} #End Foreach ($Volume in $WMI_LD)
				
			} #End Try
			
			Catch
			{
				Write-Warning "$_"
			} #End Catch
			
		} #End Foreach ($Computer in $ComputerName)
		
	} #End Process
	
	End
	{
		#Resetting ErrorActionPref
		$ErrorActionPreference = $TempErrAct
	} #End End
	
}
function Get-SystemRestarts
{
	Param (
		[Parameter(Mandatory = $true)]
		$ComputerName,
		$DaystoGoBack = 10
	)
	$ToadyDate = (Get-Date).AddDays(1)
	$StartDate = (Get-Date).AddDays(- $DaystoGoBack)
	Get-WinEvent -ComputerName $ComputerName -FilterHashtable @{ logname = 'System'; id = 1074; StartTime = $StartDate; EndTime = $ToadyDate } |
	ForEach-Object {
		$rv = New-Object PSObject | Select-Object Date, User, Action, process, Reason, ReasonCode, Comment
		$rv.Date = $_.TimeCreated
		$rv.User = $_.Properties[6].Value
		$rv.Process = $_.Properties[0].Value
		$rv.Action = $_.Properties[4].Value
		$rv.Reason = $_.Properties[2].Value
		$rv.ReasonCode = $_.Properties[3].Value
		$rv.Comment = $_.Properties[5].Value
		$rv
		
	} | Select-Object Date, Action, Reason, User, Process, Comment | Out-String
}
function Confirm-Reboot
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ComputerName
	)
	
	Restart-Computer -ComputerName $ComputerName -Force
}
Function Check-in
{
	$log = "Ninja is loading"
	Create-LogEntry -ErrorMessage $log
}
Function Load-ADTools
{
	$log = "Ninja Loaded Sucessfully"
	
	Try
	{
		Import-Module ActiveDirectory -ErrorAction Stop
	}
	Catch
	{
		$log = "AD Module not Present"
		(Show-ADToolError_psf)
	}
	Finally
	{
		Create-LogEntry -ErrorMessage $log
	}
	
}
function Clear-AllRTB
{
	$rtbComputerLocked.Clear()
	$rtbLastBootTime.Clear()
	$rtbTab1.Clear()
	$rtbTab2PendingSystemRestarts.Clear()
	$rtbTab2SystemRestarts.Clear()
	Write-Host "Cleared RTB"
	$tbknetwork.Clear()
	$tbkArchitecture.Clear()
	$tbkDomain.Clear()
	$tbkInstallDate.Clear()
	$tbkLastBootUpTime.Clear()
	$tbkManufacturer.Clear()
	$tbkModel.Clear()
	$tbkOperatingSystem.Clear()
	$tbkPhysicalMemory.Clear()
	$tbkProcessor.Clear()
	$tbkSerialNumber.Clear()
	$tbkServername.Clear()
	$tbkServername2.Clear()
	$tbkUpTime.Clear()
	Write-Host "Cleared Textboxes"
	$lblADObject.forecolor = "Black"
	$lblDNS.forecolor = "Black"
	$lblPermission.forecolor = "Black"
	$lblPings.forecolor = "Black"
	$lblPOSH.forecolor = "Black"
	Write-Host "Cleared Labels"
}
function Attack-Complete
{
	[bool]$PingResult = (Test-Connection -ComputerName $txtComputerName.Text -Quiet -Count 1)
	if ($PingResult)
	{
		Test-ComputerName -ComputerName $txtComputerName.Text
		get-loggedonuser -ComputerName $txtComputerName.Text
		$rtbComputerLocked.Text = Get-RemoteLogonStatus -ComputerName $txtComputerName.Text
		$rtbLastBootTime.Text = Get-LastBootTime -ComputerName $txtComputerName.Text
		$rtbTab2PendingSystemRestarts.Text = Get-PendingReboot -ComputerName $txtComputerName.Text
		$rtbTab2SystemRestarts.Text = Get-SystemRestarts -ComputerName $txtComputerName.Text
		Get-ComputerInfo2 -ComputerName $txtComputerName.Text
	}
	Else { $lblPINGs.forecolor = "RED" }
}
function Get-LAPSPassword
{
	param ([String]$ComputerName)
	[string]$ComputerPassword = Get-AdmPwdPassword $ComputerName | select Password
	$ComputerPassword.Substring(11, $ComputerPassword.Length - 12)
}
function Get-LAPSExpiration
{
	param ([String]$ComputerName)
	[string]$ComputerPasswordDate = Get-AdmPwdPassword $ComputerName | select ExpirationTimestamp
	$ComputerPasswordDate.Substring(22, $ComputerPasswordDate.Length - 23)
}
function Set-LAPSExpiration
{
	param ([String]$ComputerName)
	Set-ADComputer -Identity $ComputerName -Clear ms-Mcs-AdmPwdExpirationTime
	$Session = New-PSSession -ComputerName $ComputerName
	Invoke-Command -Session $Session -ScriptBlock { gpupdate.exe /target:computer }
	Remove-PSSession -Session $Session
}
function Set-LAPSExpiration1Day
{
	param ([String]$ComputerName)
	$LapsPasswordExpirationAttribute = 'ms-Mcs-AdmPwdExpirationTime'
	Set-ADComputer -Identity $ComputerName -Replace @{ "$LapsPasswordExpirationAttribute" = $(Get-Date).AddDays(+ 1).Ticks }
}
function Get-BitlockerRecoverKeyByDrive
{
	param (
		[parameter(ParameterSetName = 'pc')]
		[ValidateNotNull()]
		[string]$computer,
		[parameter(ParameterSetName = 'domain')]
		[ValidateNotNull()]
		[string]$ou,
		[int]$activeDays
	)
	$date = [datetime]::Now
	$lastUsed = $date.AddDays(- $activeDays)
	$computerObjs = @()
	$padVal = 35
	$pcNameLabel = "Computer Name".PadRight($padVal, " ")
	$dateLabel = "Computers Active Since".PadRight($padVal, " ")
	$ouLabel = "Computer Accounts".PadRight($padVal, " ")
	#Write-Output ""
	if ($computer)
	{
		$obj = get-adcomputer $computer -properties *
	}
	foreach ($pc in $obj)
	{
		$dn = $pc.DistinguishedName
		$ldPath = "AD:\", $dn -join ""
		$ldObj = Get-ChildItem $ldPath | where { $_.objectClass -eq "msFVE-RecoveryInformation" } | select -First 1
		if ($ldObj)
		{
			$ldObj = "AD:\", $ldObj.DistinguishedName -join ""
			$btPass = Get-Item $ldObj -properties "msFVE-RecoveryPassword"
			if ($btPass)
			{
				Write-Output $btPass.'msFVE-RecoveryPassword'
			}
		}
		else
		{
			# no key
			Write-Output "None"
		}
		
	}
	
}
function Test-LapsCompliance
{
	[CmdletBinding()]
	param (
		[parameter(
				   ValueFromPipeline = $true,
				   ValueFromPipelineByPropertyName = $true)]
		[string[]]$ComputerName = $env:COMPUTERNAME,
		[System.Management.Automation.PSCredential]$Credential = [System.Management.Automation.PSCredential]::Empty
	)
	
	begin
	{
		function Test-LapsInstallation
		{
			param (
				$LapsInstallationPath = 'C:\Program Files\LAPS\CSE\AdmPwd.dll'
			)
			Test-Path ($LapsInstallationPath)
		}
		
		function Test-LapsPolicyConfiguration
		{
			param (
				$RegistryPolicyPath = 'HKLM:\SOFTWARE\Policies\Microsoft Services\AdmPwd\'
			)
			if (Test-Path -Path $RegistryPolicyPath)
			{
				$LapsRegistryPolicyConfiguration = Get-Item -Path $RegistryPolicyPath
				
				$LapsPolicyConfigurationProperties = @{ }
				foreach ($Property in $LapsRegistryPolicyConfiguration.Property)
				{
					$LapsPolicyConfigurationProperties.Add($Property, $LapsRegistryPolicyConfiguration.GetValue($Property))
				}
				$LapsPolicyConfigurationProperties.Add('IsLapsConfigured', $true)
				$LapsPolicyConfiguration = New-Object -TypeName PSCustomObject -Property $LapsPolicyConfigurationProperties
				$LapsPolicyConfiguration
			}
			else
			{
				$LapsPolicyConfiguration = $false
				$LapsPolicyConfiguration
			}
			
		}
		
		function Test-LapsAdministratorPassword
		{
			param (
				[int]$PasswordAgeDays,
				[datetime]$PasswordLastSet
			)
			
			$LocalAdministratorPasswordAgeinDays = (New-TimeSpan -Start $PasswordLastSet -End (Get-Date)).Days
			if ($LocalAdministratorPasswordAgeinDays -le $PasswordAgeDays)
			{
				$LapsAdministratorPasswordValidity = $true
			}
			else
			{
				$LapsAdministratorPasswordValidity = $false
			}
			$LapsAdministratorPasswordValidity
			
		}
		
	}
	
	process
	{
		$ErrorActionPreference = 'Stop'
		foreach ($Computer in $ComputerName)
		{
			
			try
			{
				
				# Setup remote PowerShell session
				$Session = New-PSSession -ComputerName $Computer -Credential $Credential
				
				# Is LAPS installed
				Write-Verbose -Message "Checking to see if LAPS is installed on $Computer"
				$IsLapsInstalled = Invoke-Command -Session $Session -ScriptBlock ${function:Test-LapsInstallation}
				
				if ($IsLapsInstalled)
				{
					Write-Verbose -Message "LAPS is installed on $Computer"
					
					# Are LAPS-related registry-related policy items configured
					Write-Verbose -Message "Checking to see if LAPS is configured on $Computer"
					$LapsConfiguration = Invoke-Command -Session $Session -ScriptBlock ${function:Test-LapsPolicyConfiguration}
					$IsLapsConfigured = $LapsConfiguration.IsLapsConfigured
					if ($IsLapsConfigured)
					{
						Write-Verbose -Message "LAPS registry policy keys were found on $Computer"
						
						# Has the local administrator password been reset within the configured time
						$LocalAdministratorPasswordLastSet = Get-LocalAdministratorPasswordLastSet -ComputerName $Computer -Credential $Credential
						$IsLapsLocalAdministratorPasswordValid = Invoke-Command -Session $Session -ScriptBlock ${function:Test-LapsAdministratorPassword} -ArgumentList $LapsConfiguration.PasswordAgeDays, $LocalAdministratorPasswordLastSet.PasswordLastSet
						
						if ($IsLapsLocalAdministratorPasswordValid)
						{
							Write-Verbose -Message "The local administrator password on $Computer was last set on $($LocalAdministratorPasswordLastSet.PasswordLastSet) which is within $($IsLapsConfigured.PasswordAgeDays) days."
							$IsLapsCompliant = $true
							
						}
						else
						{
							Write-Warning -Message "The local administrator password on $Computer was last set on $($LocalAdministratorPasswordLastSet.PasswordLastSet) which is NOT within $($IsLapsConfigured.PasswordAgeDays) days."
							$IsLapsLocalAdministratorPasswordValid = $false
							$IsLapsCompliant = $false
						}
					}
					else
					{
						Write-Warning -Message "LAPS registry policy keys were NOT found on $Computer"
						$IsLapsConfigured = $false
						$IsLapsLocalAdministratorPasswordValid = $false
						$IsLapsCompliant = $false
					}
				}
				else
				{
					Write-Warning -Message "LAPS is not installed on $Computer."
					$IsLapsInstalled = $false
					$IsLapsConfigured = $false
					$IsLapsLocalAdministratorPasswordValid = $false
					$IsLapsCompliant = $false
				}
				#####LABEL CONTROLS
				if ($IsLapsInstalled = $true)
				{
					$labelIsLAPSInstalled.ForeColor = "GREEN"
				}
				Else
				{
					$labelIsLAPSInstalled.ForeColor = "RED"
				}
				if ($IsLapsConfigured = $true)
				{
					$labelIsLAPSConfigured.ForeColor = "GREEN"
				}
				Else
				{
					$labelIsLAPSConfigured.ForeColor = "RED"
				}
				if ($IsLapsLocalAdministratorPasswordValid = $true)
				{
					$labelIsLAPSPasswordValid.ForeColor = "GREEN"
				}
				Else
				{
					$labelIsLAPSPasswordValid.ForeColor = "RED"
				}
				if ($IsLapsCompliant = $true)
				{
					$labelIsLAPSCompliant.ForeColor = "GREEN"
				}
				Else
				{
					$labelIsLAPSCompliant.ForeColor = "RED"
				}
				
				#####LABEL CONTROLS END
				$LapsCompliance = New-Object -TypeName PSCustomObject -Property $LapsComplianceProperties
				$LapsCompliance
				
				# Tear down remove PowerShell session
				Remove-PSSession $Session
			}
			catch [System.Management.Automation.Remoting.PSRemotingTransportException] {
				Write-Error -Message $Error[0].Exception
			}
			catch
			{
				Write-Error -Message $Error[0].Exception
				if ($Session.Name)
				{
					Remove-PSSession -Session $Session
				}
			}
		}
	}
	
	end
	{
	}
}
function Get-LocalAdministratorPasswordLastSet
{
	[CmdletBinding()]
	param (
		[parameter(
				   ValueFromPipeline = $true,
				   ValueFromPipelineByPropertyName = $true)]
		[string[]]$ComputerName = $env:COMPUTERNAME,
		[System.Management.Automation.PSCredential]$Credential = [System.Management.Automation.PSCredential]::Empty
	)
	begin
	{
		
		function Get-LocalAdministratorAccountInformation
		{
			param ()
			$LocalAdministratorAccount = Get-WmiObject -Class Win32_UserAccount -Filter "LocalAccount='True' And Sid like '%-500'"
			$LocalAdministratorPasswordLastSetProperties = @{
				Username = $LocalAdministratorAccount.Name
				ComputerName = $LocalAdministratorAccount.PSComputerName
				PasswordLastSet = (Get-Date).AddSeconds(- (([adsi]"WinNT://./$($LocalAdministratorAccount.Name),user").PasswordAge).Value)
				SID	     = $LocalAdministratorAccount.SID
				FullName = $LocalAdministratorAccount.FullName
				Description = $LocalAdministratorAccount.Description
				Disabled = $LocalAdministratorAccount.Disabled
				AccountType = $LocalAdministratorAccount.AccountType
				PasswordChangeable = $LocalAdministratorAccount.PasswordChangeable
				Lockout  = $LocalAdministratorAccount.Lockout
			}
			$LocalAdministratorPasswordLastSet = New-Object -TypeName PSCustomObject -Property $LocalAdministratorPasswordLastSetProperties
			$LocalAdministratorPasswordLastSet
		}
		
	}
	process
	{
		foreach ($Computer in $ComputerName)
		{
			try
			{
				Write-Verbose -Message "Attempting to get local administrator account information on $Computer"
				Invoke-Command -ComputerName $Computer -ScriptBlock ${function:Get-LocalAdministratorAccountInformation} -Credential $Credential -ErrorAction Stop
			}
			catch [System.UnauthorizedAccessException] {
				Write-Error -Message $_.Exception
			}
			catch
			{
				Write-Error -Message $_.Exception
			}
		}
	}
	end { }
}
$MainForm_Load = {
	#TODO: Initialize Form Controls here
	#Check-in
	Load-ADTools
}


$buttonUserActions_Click = {
	#TODO: Place custom script here
	if ((Show-ChildForm_psf) -eq 'OK')
	{
		
	}
}
$buttonAttack_Click = {
	Clear-AllRTB
	#Create-LogEntry -ErrorMessage "Attack Started on $txtComputerName.text"
	Attack-Complete
}
$buttonEnablePSRemoting_Click = {
	Enable-RemotePowershellConnection -ComputerName $txtComputerName.Text
	$buttonEnablePSRemoting.Visible = $false
	$buttonAttack_Click
}

$btnTab3AttackthisPage_Click = {
	Clear-AllRTB
	#Create-LogEntry -ErrorMessage "Tab 3 Attack Started on $txtComputerName.text"
	[bool]$PingResult = (Test-Connection -ComputerName $txtComputerName.Text -Quiet -Count 1)
	if ($PingResult)
	{
		Test-ComputerName -ComputerName $txtComputerName.Text
		Get-ComputerInfo2 -ComputerName $txtComputerName.Text
		
	}
	Else { $lblPINGs.forecolor = "RED" }
}
$btnTab2AttackthisPage_Click = {
	Clear-AllRTB
	#Create-LogEntry -ErrorMessage "Tab 2 Attack Started on $txtComputerName.text"
	[bool]$PingResult = (Test-Connection -ComputerName $txtComputerName.Text -Quiet -Count 1)
	if ($PingResult)
	{
		Test-ComputerName -ComputerName $txtComputerName.Text
		$rtbTab2PendingSystemRestarts.Text = Get-PendingReboot -ComputerName $txtComputerName.Text
		$rtbTab2SystemRestarts.Text = Get-SystemRestarts -ComputerName $txtComputerName.Text
	}
	Else { $lblPINGs.forecolor = "RED" }
}
$btnTab1AttackthisPage_Click = {
	Clear-AllRTB
	#Create-LogEntry -ErrorMessage "Tab 1 Attack Started on $txtComputerName.text"
	[bool]$PingResult = (Test-Connection -ComputerName $txtComputerName.Text -Quiet -Count 1)
	if ($PingResult)
	{
		Test-ComputerName -ComputerName $txtComputerName.Text
		get-loggedonuser -ComputerName $txtComputerName.Text
		$rtbComputerLocked.Text = Get-RemoteLogonStatus -ComputerName $txtComputerName.Text
		$rtbLastBootTime.Text = Get-LastBootTime -ComputerName $txtComputerName.Text
		
	}
	Else { $lblPINGs.forecolor = "RED" }
}
$buttonLogOffAllUsers_Click = {
	if ((Show-RebootConfirmation_psf) -eq 'OK')
	{
		Create-LogEntry -ErrorMessage "Reboot Comand sent to $txtComputerName.text"
		Confirm-Reboot -ComputerName $txtComputerName.Text
		
	}
}
$buttonConvertToNATO_Click={
	#TODO: Place custom script here
	(Show-ConverttoNATO_psf)
}

$buttonSearch_Click = {
	#TODO: Place custom script here
	$labelSEARCHISCOMPLETE.Visible = $false
	$ComputerName = $txtComputerName.text
	$txtLAPSPassword.Text = Get-LAPSPassword $ComputerName
	$txtExpirationDate.Text = Get-LAPSExpiration $ComputerName
	$rtbxBitlockerRecovery.text = "LOADING"
	$rtbxBitlockerRecovery.text = Get-BitlockerRecoverKeyByDrive -computer $ComputerName
	Test-LapsCompliance $ComputerName
	$labelSEARCHISCOMPLETE.Visible = $true
}

$buttonResetPasswordNow_Click = {
	#TODO: Place custom script here
	$ComputerName = $txtComputerName.text
	Set-LAPSExpiration $ComputerName
}

$buttonResetPassword1Day_Click = {
	#TODO: Place custom script here
	$ComputerName = $txtComputerName.text
	Set-LAPSExpiration1Day $ComputerName
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>